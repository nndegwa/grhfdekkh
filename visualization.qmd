---
title: "Study: R for Data Science"
format: html
editor: visual
---

# Data Visualization

```{r One-off package installation}
source(here::here("setup.R"))
```

```{r load penguins data}
penguins <- palmerpenguins::penguins
```

```{r Scatterplot two numeric vars}
plot <- ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(mapping = aes(color = species, shape = species), na.rm = TRUE) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body Mass and Flipper Length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)",
    y = "Body mass (g)",
    color = "Species",
    shape = "Species",
    caption = "Data come from the palmerpenguins package."
  ) +
  scale_color_colorblind()

plot
```

```{r}
plot <- ggplot(
  data = penguins,
  mapping = aes(x = bill_length_mm, y = bill_depth_mm)
) +
  geom_point(mapping = aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Bill Depth and Bill Length",
    x = "BBill Length (mm)",
    y = "Bill Depth (mm)",
    color = "Species",
    shape = "Species"
  ) +
  scale_color_colorblind()

plot
```

## Distribution of categorical variables: Bar chart

```{r Barplot for categorical vars}
unordered_barplot <- penguins %>% ggplot(aes(x = species)) +
  geom_bar()

unordered_barplot
```

If a categorical variable has non-ordered levels, it is preferable to order them by their frequencies.

```{r}
penguins %>%
  ggplot(aes(fct_infreq(species))) +
  geom_bar()
```

## Numerical variables

Numerical variables can be visualized for distributions using histograms

```{r histograms for distribution of numeric vars}
penguins %>% ggplot(aes(x = body_mass_g)) +
  geom_histogram(binwidth = 200)
```

An alternative visualization for distributions of numerical variables is a density plot. A density plot is a smoothed-out version of a histogram and a practical alternative, particularly for continuous data that comes from an underlying smooth distribution. Use: make it easier to quickly glean the shape of the distribution, particularly with respect to modes and skewness.

```{r Density plot for contvars for shape mode and skewness }
penguins %>% ggplot(aes(body_mass_g)) +
  geom_density()
```

## Relationship between two variables: Numerical and categorical

Numerical and categorical A boxplot is a type of visual shorthand for measures of position (percentiles) that describe a distribution. It is also useful for identifying potential outliers.

-   A box that indicates the range of the middle half of the data, a distance known as the interquartile range (IQR), stretching from the 25th percentile of the distribution to the 75th percentile. In the middle of the box is a line that displays the median, i.e. 50th percentile, of the distribution. These three lines give you a sense of the spread of the distribution and whether or not the distribution is symmetric about the median or skewed to one side.

-   Visual points that display observations that fall more than 1.5 times the IQR from either edge of the box. These outlying points are unusual so are plotted individually.

-   A line (or whisker) that extends from each end of the box and goes to the farthest non-outlier point in the distribution.

```{r Boxplot for relationship between numerical and categorical}
penguins %>% ggplot(aes(x = species, y = body_mass_g)) +
  geom_boxplot()
```

### Alternatively can make density plots.

we can map species to both color and fill aesthetics and use the alpha aesthetic to add transparency to the filled density curves. This aesthetic takes values between 0 (completely transparent) and 1 (completely opaque)

```{r Density plot for numeric and categorical variable}
penguins %>% ggplot(aes(x = body_mass_g, color = species, fill = species)) + 
  geom_density(linewidth = 0.75, alpha = 0.4)
```

Note the terminology we have used here:

-   We map variables to aesthetics if we want the visual attribute represented by that aesthetic to vary based on the values of that variable.
-   Otherwise, we set the value of an aesthetic.


## Relationship between two variables: Two categorical variables
Use stacked bar plots to visualize the relationship between two categorical variables.

```{r Stacked barplot for relationship btwn two categorical vars}
penguins %>% ggplot(aes(x = island, fill = species)) +
  geom_bar()
```


The second plot, a relative frequency plot created by setting position = "fill" in the geom, is more useful for comparing species distributions across islands since itâ€™s not affected by the unequal numbers of penguins across the islands. Using this plot we can see that Gentoo penguins all live on Biscoe island and make up roughly 75% of the penguins on that island, Chinstrap all live on Dream island and make up roughly 50% of the penguins on that island, and Adelie live on all three islands and make up all of the penguins on Torgersen


In creating these bar charts, we map the variable that will be separated into bars to the x aesthetic, and the variable that will change the colors inside the bars to the fill aesthetic.
```{r Stacked frequency barplot for relationship btwn two categorical vars}
penguins %>% ggplot(aes(x = island, fill = species)) +
  geom_bar(position = "fill")
```


## Two numerical variables

Use scatterplots (created with geom_point()) and smooth curves (created with geom_smooth()) for visualizing the relationship between two numerical variables. A scatterplot is probably the most commonly used plot for visualizing the relationship between two numerical variables.

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point()
```


## Three or more variables

we can incorporate more variables into a plot by mapping them to additional aesthetics. For example, in the following scatterplot the colors of points represent species and the shapes of points represent islands.

```{r}
penguins %>% ggplot(aes(y = body_mass_g, x = flipper_length_mm)) +
  geom_point(aes(color = species, shape = island))
```

However adding too many aesthetic mappings to a plot makes it cluttered and difficult to make sense of. 

Another way, which is particularly useful for categorical variables, is to split your plot into facets, subplots that each display one subset of the data.

 #### Facets
 To facet your plot by a single variable, use facet_wrap(). The first argument of facet_wrap() is a formula3, which you create with ~ followed by a variable name. The variable that you pass to facet_wrap() should be categorical.
 

```{r}
penguins %>% ggplot(aes(y = body_mass_g, x = flipper_length_mm)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```

